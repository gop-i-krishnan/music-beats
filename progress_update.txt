**MUSIC BEATS Project - Backend Setup Progress Summary**

---

**Project Goal:** Build a smart web app for managing operations of a music institute (attendance, fees, scheduling, users).

---

### 📁 Folder Structure (as of now)

```
music_beats/               <-- Main project folder
├── venv/                  <-- Virtual environment (Python packages)
└── backend/               <-- Django project folder
    ├── backend/           <-- Project settings folder
    │   ├── settings.py    <-- Django settings (added accounts app, custom user)
    │   ├── urls.py        <-- Root URL configs
    ├── accounts/          <-- Custom app for user system
    │   ├── models.py      <-- CustomUser model (email login)
    │   ├── admin.py       <-- Register CustomUser to admin
    │   ├── migrations/    <-- Migration scripts (auto-generated)
    ├── db.sqlite3         <-- SQLite database
    └── manage.py          <-- Django command-line tool
```

---

### 📊 Step-by-Step Progress + Commands

#### 1. **Setup Environment**

```bash
python -m venv venv
.\venv\Scripts\Activate.ps1       # (activate on Windows)
```

* Created an isolated environment to install Django.

#### 2. **Create Django Project**

```bash
django-admin startproject backend .
```

* Initializes Django with a `backend` project inside current directory.

#### 3. **Create App: accounts**

```bash
python manage.py startapp accounts
```

* Created custom app to manage user system.

#### 4. **Register App in settings.py**

```python
INSTALLED_APPS = [
    ...
    'accounts',
]
```

#### 5. **Create Custom User Model**

* Modified `accounts/models.py` to include:

```python
class CustomUser(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(unique=True)
    full_name = models.CharField(max_length=100)
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)
    ...
```

#### 6. **Set Custom User in settings.py**

```python
AUTH_USER_MODEL = 'accounts.CustomUser'
```

* Tells Django to use our model instead of the default User.

#### 7. **Create Migration for CustomUser**

```bash
python manage.py makemigrations accounts
```

* Django created a migration script for the database schema.

#### 8. **Apply Migrations to DB**

```bash
python manage.py migrate
```

* Builds all necessary tables in the SQLite database.

#### 9. **Create Superuser**

```bash
python manage.py createsuperuser
```

* Used email + full name + password to create admin account.

---

### 🪤 Concepts Learned So Far

* How Django apps are structured.
* Why we need virtual environments.
* What `makemigrations` and `migrate` do.
* Purpose of `AUTH_USER_MODEL`.
* How Django builds and manages databases using migrations.
* How to override the default user system using `AbstractBaseUser`.

---

Next Step: Build login, register, and admin panel logic.

(*This doc will be updated as development continues. Ask anytime to update or review.*)
